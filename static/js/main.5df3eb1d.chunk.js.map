{"version":3,"sources":["components/WeatherCard/WeatherCard.js","components/SearchBox/SearchBox.js","components/WeatherDetails/WeatherDetails.js","App.js","serviceWorker.js","index.js"],"names":["WeatherIcon","type","Fragment","className","WeatherCard","useState","weather","setWeather","weatherType","setWeatherType","tempature","setTempature","weatherTypeBuilder","undefined","api","key","base","parentCallback","weatherData","main","Math","round","temp","locationText","name","SearchBox","query","setQuery","placeholder","tabIndex","onChange","e","target","value","onKeyPress","length","fetch","then","res","json","result","WeatherDetails","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","renderEverything","activeClassText","Date","AddNewCard","count","setCardCount","id","onClick","class","App","cardCount","cards","i","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5df3eb1d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { SearchBox, WeatherDetails } from '../';\r\nimport './WeatherCard.css';\r\n\r\nconst WeatherCard = () => {\r\n\r\n  const api = {\r\n    key: \"9a75684935343624a4629374c8453b13\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n  }\r\n\r\n  const [weather, setWeather] = useState('');\r\n  const [weatherType, setWeatherType] = useState('');\r\n  const [tempature, setTempature] = useState(0);\r\n\r\n  const weatherFetchedCallback = (weatherData) => {\r\n    //console.log(\"Got data from search:\");\r\n    //console.log(weatherData);\r\n\r\n    if (weatherData == null) {\r\n      setWeather(\"undefined\");\r\n      return\r\n    };\r\n\r\n    // Set weather if it's not undefined\r\n    if (weatherData.main !== \"undefined\") {\r\n      setWeather(weatherData);\r\n      setWeatherType(weatherTypeBuilder(weatherData.weather[0].main));\r\n      setTempature(Math.round(weatherData.main.temp));\r\n    }\r\n\r\n  }\r\n\r\n  const weatherTypeBuilder = (type) => {\r\n\r\n    if (type === undefined) {\r\n      return '';\r\n    }\r\n    else if (type === 'Raining') {\r\n      return 'raining';\r\n    }\r\n    else if (type === 'Clear') {\r\n      return 'clear';\r\n    }\r\n    else if (type === 'Clouds') {\r\n      return 'cloudy';\r\n    }\r\n    else {\r\n      // default, return clear\r\n      return '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"weather-card\">\r\n      <SearchBox api={api} parentCallback={weatherFetchedCallback} />\r\n      <WeatherDetails\r\n        locationText={weather.name}\r\n        weatherType={weatherType}\r\n        temp={tempature}\r\n      />\r\n      <WeatherIcon type={weatherType} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n// Simple Components\r\nconst WeatherIcon = ({ type }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className={`weather-icon ${type}`}></ div>\r\n      <div className={`weather-text`}>{`${type}`}</ div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default WeatherCard;","import React, { useState } from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ api, parentCallback }) => {\r\n\r\n  const [query, setQuery] = useState('');\r\n\r\n  const search = e => {\r\n    if (e.key === 'Enter') {\r\n\r\n      if (query.length <= 0) {\r\n        parentCallback();\r\n        return;\r\n      }\r\n\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          parentCallback(result);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-box\">\r\n      <input type=\"text\"\r\n        className=\"search-bar\"\r\n        placeholder=\"Search For Location...\"\r\n        tabIndex=\"1\"\r\n        onChange={e => setQuery(e.target.value)}\r\n        value={query}\r\n        onKeyPress={search}\r\n      >\r\n      </input>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './WeatherDetails.css';\r\n\r\nconst WeatherDetails = ({ locationText, weatherType, temp }) => {\r\n\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`;\r\n\r\n  }\r\n\r\n  let renderEverything = false;\r\n  let activeClassText = '';\r\n  if (locationText !== undefined) {\r\n    renderEverything = true;\r\n    activeClassText = 'active';\r\n  }\r\n  if (renderEverything === true) {\r\n    // Render out the fetched details\r\n    return (\r\n      <div className={`weather-details ${weatherType} ${activeClassText}`}>\r\n        <p>{/* Used to have header text here*/}</p>\r\n        <div className=\"temp-text\">{`${temp}Â°C`}</div>\r\n        <div className=\"location-text\">{`${locationText}`}</div>\r\n        <div className=\"date-text\">{dateBuilder(new Date())}</div>\r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    // render out starting data\r\n    return (\r\n      <div className={`weather-details`}>\r\n        <p>Search for a location below</p>\r\n        <div className=\"temp-text\"></div>\r\n        <div className=\"date-text\">{dateBuilder(new Date())}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default WeatherDetails;","import React, { useState } from 'react';\nimport './App.css';\nimport { WeatherCard } from './components';\n\n// Use module react-detect to check if on mobile\nimport { BrowserView } from \"react-device-detect\";\n\nfunction App() {\n\n\n  // Allow more cards to be added\n  const [cardCount, setCardCount] = useState(1); // start with 1\n\n  // Loop through the count and add the cards to the array\n  const cards = [];\n  for (var i = 0; i < cardCount; i += 1) {\n    cards.push(<React.Fragment key={i}><WeatherCard /></React.Fragment>);\n    // wrapped in fragment with key since each element must have one\n  };\n\n\n  return (\n    <div className=\"app\">\n      {cards}\n      {/* Using react-detect below to only render plus button on desktop*/}\n      <BrowserView>\n        <AddNewCard count={cardCount} setCardCount={setCardCount} />\n      </BrowserView>\n    </div>\n  );\n}\n\nconst AddNewCard = ({ count, setCardCount }) => {\n\n  const maxCardCount = 3;\n\n  // Check if max count is already reached, don't render button if true\n  if (count >= maxCardCount) {\n    return (<React.Fragment></React.Fragment>);\n  }\n  else {\n    return (\n      <React.Fragment>\n        <button id=\"new-todo-submitbtn\" onClick={() => {\n          if (count < maxCardCount)\n            setCardCount(count + 1)\n        }}><i class=\"fa fa-plus\"></i></button>\n      </React.Fragment>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}